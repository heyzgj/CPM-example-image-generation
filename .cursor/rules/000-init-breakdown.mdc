---
description: 
globs: 
alwaysApply: true
---
---
description: The master engine for project initialization, planning, and state management. It operates on the `/project` directory, using a file-based, partitioned task system.
globs: ["*"]
---
# Project Engine: Planning & State Management (v2.0)

## Context
- **When to apply:**
  1.  **Project Initialization:** When a new project starts and the `/docs` directory is populated.
  2.  **State Update:** Before starting any new task, to determine the next action.
  3.  **Re-planning:** When triggered by the `400-change-manager` rule.
- **Goal:** To create and maintain a robust, partitioned, file-based project management system in `/project`, serving as the agent's persistent memory and work plan.

## Phase 1: Requirement Validation & Clarification (Interactive)

1.  **Analyze Source Docs:** Read all documents in `/docs` and analyze them against an internal quality checklist (Clarity, Completeness, Consistency).
2.  **Initiate Clarification Dialogue:** If ambiguities are found (e.g., missing NFRs, vague scope), I MUST pause and ask the user for clarification. I will not proceed with a flawed understanding.

## Phase 2: Scaffolding, Decomposition, and Population

1.  **Recognize Project Archetype:** Classify the project (e.g., `full-stack-app`) based on `/docs`.
2.  **Generate Code Scaffolding:** Create the initial code directory structure based on the archetype.
3.  **Decompose into Epics & Tasks:**
    *   **Epics:** For each major feature in the PRD, read `/project/_templates/epic.md`, use it as a template to create a new file in `/project/epics/`, and populate it.
    *   **Tasks:** For each epic, break it down into atomic tasks. For each task, read `/project/_templates/task.md`, use it as a template, and create the corresponding task file inside the `/project/tasks/todo/` directory.

## Phase 3: State Initialization

1.  **Generate `project_status.md`:** Create the central dashboard file. It will contain the active task pointer, high-level views, and instructions for me on how to query the partitioned task system.
2.  **Set First Task:** Identify the first actionable task from `/project/tasks/todo/`, move it to `/project/tasks/in_progress/`, and set it as the `Active Task` in `project_status.md`.
3.  **Report & Begin:** Announce the completion of planning and state the first task I will be working on.

## Agent's Core Working Loop (Post-Planning)

1.  **Read Dashboard:** At the start of any work session, my FIRST action is to read `/project/project_status.md` to get my `Active Task ID`.
2.  **Load Task Context:** My `Active Task` file is located in `/project/tasks/in_progress/`. I will read that task file.
3.  **Load Bound Context:** I will then load ONLY the files and doc sections specified in that task's `Context Binding`.
4.  **Execute Task:** Implement the code, run tests, and verify against the task's `Acceptance Criteria`.
5.  **Update State (Atomic File Operations):**
    *   **On Completion:** I will execute `mv ./project/tasks/in_progress/T<ID>.md ./project/tasks/done/$(date +%Y-Q%q)/T<ID>.md`. I will create the archive directory if it doesn't exist. I will also update the `status: Done` and `updated_at` fields within the file.
    *   **Select Next Task:** I will find the next actionable task in `/project/tasks/todo/` (whose dependencies are met).
    *   **Start Next Task:** I will execute `mv ./project/tasks/todo/T<NextID>.md ./project/tasks/in_progress/T<NextID>.md`.
    *   **Update Dashboard:** I will update `/project/project_status.md` with the new `Active Task ID` and refresh the dashboard stats.