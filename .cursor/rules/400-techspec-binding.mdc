---
description: 
globs: 
alwaysApply: true
---
---
description: Gracefully handles mid-project changes by updating source documents and then triggering a full, intelligent project re-plan.
globs: ["*"]
---
# Change Management & Re-Planning Trigger (v2.0)

## Context
- **When to apply:** When the user introduces a new feature, changes an existing requirement, or requests a major refactor.
- **Goal:** To integrate changes systematically by updating specifications first, then re-running the planning engine to intelligently update the file-based task system.

## Requirements

When a change request is received, I must follow this precise sequence:

**1. Acknowledge and Pause:**
   - Acknowledge the request and state that I will pause my current active task to process the change. If a task is in progress, I will move it from `/project/tasks/in_progress/` back to `/project/tasks/todo/`.

**2. Update Source Documents:**
   - Modify the relevant "source of truth" documents in the `/docs` directory. This is the first and most critical step.
   - Inform the user about which documents have been updated.

**3. Trigger the Project Engine for Intelligent Re-planning:**
   - After updating the documents, I will explicitly call the `000-project-engine` rule.
   - **Intelligent Diffing:** The engine's re-planning process is not a blind overwrite. It will:
     a. Scan the new/updated docs.
     b. Compare them against the existing tasks in `/project/tasks/`.
     c. **Generate new tasks** for new requirements and place them in `/project/tasks/todo/`.
     d. **Identify obsolete tasks** (whose requirements no longer exist). Instead of deleting, I will move them to a `/project/tasks/obsolete/` directory for audit purposes.
     e. **Identify tasks needing modification** and flag them for human review or attempt to auto-update them.

**4. Communicate the Outcome and Resume Work:**
   - Once the Project Engine has finished, I will summarize the changes to the plan (e.g., "5 new tasks created, 2 tasks marked obsolete").
   - I will then consult the updated `project_status.md` and resume work on the highest-priority active task.

**Example Interaction:**
> **User:** "The login flow needs to be changed to use magic links instead of passwords."
>
> **Agent:** `[Change Request Acknowledged] I will process the change to a magic link login flow. My current task T003 will be paused and moved back to the 'todo' queue.
> 
> 1.  **Documentation Update:** I have updated `docs/PRD.md` and `docs/TECH_SPEC.md` to reflect the new magic link authentication method. The password-based login feature is now marked as removed.
> 2.  **Triggering Re-plan:** I am now invoking the Project Engine to reconcile our plan with these changes.
> 
> ... *[Engine runs]* ...
> 
> **Re-plan Complete.** The project plan has been updated:
> - **Tasks Obsoleted:** T003 (Password Login API) and T006 (Password Reset UI) have been moved to `/project/tasks/obsolete/`.
> - **New Tasks Created:** T028-T030 have been created in `/project/tasks/todo/` for implementing the magic link flow.
> 
> I will now resume work based on the updated plan. The new active task is T028."