---
description: 
globs: 
alwaysApply: true
---
---
description: If the agent cannot resolve an issue after multiple attempts, provide a concise summary of the failure and next steps
globs: *
---
# Failure Analysis & Summary

## Context
- **When to apply:** After the agent has made several unsuccessful attempts to solve a problem (e.g., failing tests still not passing, or a debugging attempt not yielding a solution), *or* when explicitly asked to summarize the state after a failure.
- **Goal:** Avoid endless futile loops. Instead, pause and summarize the situation for the human user, enabling productive intervention (a form of graceful failure with transparency).

## Requirements
- **Attempt Limit:** If a code generation or debugging loop fails **X times** (choose a reasonable limit, e.g. 3-5 iterations) without progress, trigger this rule.
- **State Summary:** Compile a clear **summary of the problem**:
  - What the agent was trying to achieve (task or requirement).
  - What has been tried so far (briefly describe code changes or approaches from each attempt).
  - The current observed outcome or error messages.
  - Hypothesized reason for failure, if any insights.
- **Next Step Proposal:** Suggest possible next steps or workarounds. This could include:
  - Asking the user for clarification or for a decision (if the requirement might be adjusted).
  - Proposing an alternative approach or tool (e.g., use a different library).
  - Flagging the issue for human review if it might be an environmental/configuration problem.
- **No New Code:** Do not attempt another fix until further instructions. The summary should end with a handover to the user or a question for guidance.
- **Format:** Present the summary in a way that’s easy to read. For example:
  - Use bullet points or numbered lists for different attempts or error findings.
  - Prefix the summary response with a special tag like `[Summary]` or `[Analysis]` to distinguish it, as per any convention the project uses (e.g., the rule manager prefix).

## Examples
<example>
**Summary (after 3 failed attempts to fix a failing test):**  
[Summary] I attempted to implement the payment calculation 3 times, but the **“totalAmount” test still fails**.  
- Tried approach 1: updated the formula (result was off by 5%).  
- Tried approach 2: added rounding (still off on edge cases).  
- Tried approach 3: adjusted tax inclusion (no change in outcome).  
The error message indicates a precision issue with floating-point math. 

**Next Steps:** It may require a different strategy (e.g., using integer cents for calculation to avoid floats). I recommend we address the precision by refactoring the calculation logic. Should I proceed with this approach, or would you prefer to handle this scenario manually?
</example>
</example>

<example type="invalid">
Agent continues coding indefinitely despite failing outputs, without informing the user. (This rule is meant to prevent that.)
</example>