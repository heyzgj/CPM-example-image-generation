---
description: 
globs: 
alwaysApply: true
---
---
description: Handle mid-project requirement changes, new feature requests, or refactors by updating plans and documentation
globs: *
---
# Change Management (New Requirements & Refactoring)

## Context
- **When to apply:** If the user introduces a **new feature**, changes a requirement in the PRD, or requests a major **refactor** of existing code/architecture mid-project.
- **Goal:** Adapt the task plan and documentation to incorporate the changes, ensuring the project remains coherent and up-to-date.

## Requirements
- **Acknowledge Change:** Clearly acknowledge the new information or change. Determine whether it’s an addition, modification, or removal of a requirement or design element.
- **Update PRD/Documentation:** Modify the PRD and other relevant docs:
  - For a **new feature:** Add a description in the PRD (and update UX Flow or Data Map if needed). Mark it appropriately (e.g., “Feature X (added in vNext)”).
  - For a **requirement change:** Edit the affected section of the PRD to reflect the new requirement. Highlight what changed (for transparency).
  - For a **refactor:** Update the Architecture Guide/Tech Spec to describe the new proposed structure or improvements.
- **Regenerate or Adjust Tasks:** Re-run the INIT breakdown process for the new/changed requirements:
  - If new feature: generate new tasks and integrate them into the existing task list (with proper prioritization and dependencies).
  - If a requirement changed or was removed: update or cancel the corresponding tasks. If code for an old requirement was already written, schedule tasks to modify or remove that code.
  - If refactoring: create tasks to implement the refactor (e.g. “Refactor Module Y to use new design pattern”) and tasks to update tests (if needed) to ensure nothing breaks.
- **Diff and Communicate:** Communicate the changes to the user in the next response:
  - Possibly provide a **diff** or summary of what changed in the documents (so the user can easily see updates).
  - List any **new tasks** or changes to task status (e.g., “Task 5: updated to reflect requirement change in Feature ABC”).
  - If the change is significant, ask for confirmation before proceeding (especially if it alters scope).
- **Consistency Check:** Ensure that all documents remain consistent after the change. The PRD is a “living document” – treat the others (Tech Spec, etc.) as living as well, updating them promptly.
- **Proceed with Implementation:** Once the documentation and task list are updated (and confirmed by the user if needed), resume development under the updated plan (following all other rules like TDD, etc. for new tasks).

## Examples
<example>
**New Feature Scenario:** User requests a *“Dark Mode”* feature for the app.
- **Agent response:** Acknowledge and update docs: adds a section in PRD under Features for "Dark Mode", updates UX_FLOW.md with a new flow for theme toggle, and appends tasks like “Implement Dark Mode toggle (frontend)” and “Persist user theme preference (backend)” to the task list.
- The agent presents:  
  *“Added **Dark Mode** feature to PRD (see section 5.4) and created 2 new tasks (IDs 12 and 13) for implementing it. Updated Tech Spec with theming approach. Ready to proceed with these tasks.”*
</example>

<example>
**Requirement Change Scenario:** PRD originally said *“support up to 100 users”* but is changed to *“up to 1000 users”*.
- **Agent response:** Updates PRD wording, notes that scaling requirements increased. In Tech Spec, notes need to use a more robust data store or load balancing. Schedules a refactoring task if needed (e.g., replace in-memory store with Redis). Communicates:  
  *“Requirement updated: support 1000 users (was 100). Architecture updated to plan for horizontal scaling (see ARCHITECTURE_GUIDE.md). Task 7 revised to include Redis integration.”*
</example>